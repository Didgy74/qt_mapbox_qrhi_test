// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#include "vector_tile.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace vector_tile {

inline constexpr Tile_Value::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        string_value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        double_value_{0},
        int_value_{::int64_t{0}},
        float_value_{0},
        bool_value_{false},
        uint_value_{::uint64_t{0u}},
        sint_value_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Tile_Value::Tile_Value(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Tile_ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tile_ValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tile_ValueDefaultTypeInternal() {}
  union {
    Tile_Value _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tile_ValueDefaultTypeInternal _Tile_Value_default_instance_;

inline constexpr Tile_Feature::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tags_{},
        _tags_cached_byte_size_{0},
        geometry_{},
        _geometry_cached_byte_size_{0},
        id_{::uint64_t{0u}},
        type_{static_cast< ::vector_tile::Tile_GeomType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Tile_Feature::Tile_Feature(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Tile_FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tile_FeatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tile_FeatureDefaultTypeInternal() {}
  union {
    Tile_Feature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tile_FeatureDefaultTypeInternal _Tile_Feature_default_instance_;

inline constexpr Tile_Layer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        features_{},
        keys_{},
        values_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        extent_{4096u},
        version_{1u} {}

template <typename>
PROTOBUF_CONSTEXPR Tile_Layer::Tile_Layer(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Tile_LayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tile_LayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tile_LayerDefaultTypeInternal() {}
  union {
    Tile_Layer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tile_LayerDefaultTypeInternal _Tile_Layer_default_instance_;

inline constexpr Tile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : layers_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Tile::Tile(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileDefaultTypeInternal _Tile_default_instance_;
}  // namespace vector_tile
namespace vector_tile {
PROTOBUF_CONSTINIT const uint32_t Tile_GeomType_internal_data_[] = {
    262144u, 0u, };
bool Tile_GeomType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Tile_GeomType_strings[4] = {};

static const char Tile_GeomType_names[] = {
    "LINESTRING"
    "POINT"
    "POLYGON"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry Tile_GeomType_entries[] =
    {
        {{&Tile_GeomType_names[0], 10}, 2},
        {{&Tile_GeomType_names[10], 5}, 1},
        {{&Tile_GeomType_names[15], 7}, 3},
        {{&Tile_GeomType_names[22], 7}, 0},
};

static const int Tile_GeomType_entries_by_number[] = {
    3,  // 0 -> UNKNOWN
    1,  // 1 -> POINT
    0,  // 2 -> LINESTRING
    2,  // 3 -> POLYGON
};

const std::string& Tile_GeomType_Name(Tile_GeomType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Tile_GeomType_entries, Tile_GeomType_entries_by_number,
          4, Tile_GeomType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Tile_GeomType_entries, Tile_GeomType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Tile_GeomType_strings[idx].get();
}

bool Tile_GeomType_Parse(absl::string_view name, Tile_GeomType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Tile_GeomType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Tile_GeomType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Tile_GeomType Tile::UNKNOWN;
constexpr Tile_GeomType Tile::POINT;
constexpr Tile_GeomType Tile::LINESTRING;
constexpr Tile_GeomType Tile::POLYGON;
constexpr Tile_GeomType Tile::GeomType_MIN;
constexpr Tile_GeomType Tile::GeomType_MAX;
constexpr int Tile::GeomType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Tile_Value::_Internal {
 public:
  using HasBits = decltype(std::declval<Tile_Value>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_._has_bits_);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uint_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sint_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Tile_Value::Tile_Value(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vector_tile.Tile.Value)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _extensions_{visibility, arena},
        _has_bits_{from._has_bits_},
        _cached_size_{0},
        string_value_(arena, from.string_value_) {}

Tile_Value::Tile_Value(
    ::google::protobuf::Arena* arena,
    const Tile_Value& from)
    : ::google::protobuf::MessageLite(arena) {
  Tile_Value* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_._extensions_.MergeFrom(this, from._impl_._extensions_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, double_value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, double_value_),
           offsetof(Impl_, sint_value_) -
               offsetof(Impl_, double_value_) +
               sizeof(Impl_::sint_value_));

  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Value)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _extensions_{visibility, arena},
        _cached_size_{0},
        string_value_(arena) {}

inline void Tile_Value::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, double_value_),
           0,
           offsetof(Impl_, sint_value_) -
               offsetof(Impl_, double_value_) +
               sizeof(Impl_::sint_value_));
}
Tile_Value::~Tile_Value() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Value)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Tile_Value::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.string_value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Tile_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.double_value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sint_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.sint_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile_Value::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Tile_Value::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_._extensions_),
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Tile_Value_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string string_value = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.string_value_)}},
    // optional float float_value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.float_value_)}},
    // optional double double_value = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.double_value_)}},
    // optional int64 int_value = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.int_value_)}},
    // optional uint64 uint_value = 5;
    {::_pbi::TcParser::FastV64S1,
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.uint_value_)}},
    // optional sint64 sint_value = 6;
    {::_pbi::TcParser::FastZ64S1,
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.sint_value_)}},
    // optional bool bool_value = 7;
    {::_pbi::TcParser::FastV8S1,
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.bool_value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string string_value = 1;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.string_value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional float float_value = 2;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.float_value_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional double double_value = 3;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.double_value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int64 int_value = 4;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.int_value_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional uint64 uint_value = 5;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.uint_value_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional sint64 sint_value = 6;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.sint_value_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt64)},
    // optional bool bool_value = 7;
    {PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.bool_value_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Tile_Value::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vector_tile.Tile.Value)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string string_value = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_string_value();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional float float_value = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_float_value(), target);
  }

  // optional double double_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_double_value(), target);
  }

  // optional int64 int_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_int_value(), target);
  }

  // optional uint64 uint_value = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_uint_value(), target);
  }

  // optional sint64 sint_value = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_sint_value(), target);
  }

  // optional bool bool_value = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_bool_value(), target);
  }

  // Extension range [8, 536870912)
  target = _impl_._extensions_._InternalSerialize(
      internal_default_instance(), 8, 536870912, target, stream);
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vector_tile.Tile.Value)
  return target;
}

::size_t Tile_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Value)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string string_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
    }

    // optional double double_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional int64 int_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
    }

    // optional float float_value = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional bool bool_value = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional uint64 uint_value = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint_value());
    }

    // optional sint64 sint_value = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
          this->_internal_sint_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Tile_Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile_Value*>(
      &from));
}

void Tile_Value::MergeFrom(const Tile_Value& from) {
  Tile_Value* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Value)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.int_value_ = from._impl_.int_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.float_value_ = from._impl_.float_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uint_value_ = from._impl_.uint_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.sint_value_ = from._impl_.sint_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile_Value::CopyFrom(const Tile_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Tile_Value::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }
  return true;
}

::_pbi::CachedSize* Tile_Value::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Tile_Value::InternalSwap(Tile_Value* PROTOBUF_RESTRICT other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_value_, &other->_impl_.string_value_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.sint_value_)
      + sizeof(Tile_Value::_impl_.sint_value_)
      - PROTOBUF_FIELD_OFFSET(Tile_Value, _impl_.double_value_)>(
          reinterpret_cast<char*>(&_impl_.double_value_),
          reinterpret_cast<char*>(&other->_impl_.double_value_));
}

std::string Tile_Value::GetTypeName() const {
  return "vector_tile.Tile.Value";
}

// ===================================================================

class Tile_Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Tile_Feature>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Tile_Feature::Tile_Feature(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vector_tile.Tile.Feature)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Feature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tags_{visibility, arena, from.tags_},
        _tags_cached_byte_size_{0},
        geometry_{visibility, arena, from.geometry_},
        _geometry_cached_byte_size_{0} {}

Tile_Feature::Tile_Feature(
    ::google::protobuf::Arena* arena,
    const Tile_Feature& from)
    : ::google::protobuf::MessageLite(arena) {
  Tile_Feature* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Feature)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Feature::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tags_{visibility, arena},
        _tags_cached_byte_size_{0},
        geometry_{visibility, arena},
        _geometry_cached_byte_size_{0} {}

inline void Tile_Feature::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
Tile_Feature::~Tile_Feature() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Feature)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Tile_Feature::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Tile_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Feature)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.geometry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile_Feature::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> Tile_Feature::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Tile_Feature_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated uint32 geometry = 4 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.geometry_)}},
    // optional uint64 id = 1 [default = 0];
    {::_pbi::TcParser::FastV64S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.id_)}},
    // repeated uint32 tags = 2 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.tags_)}},
    // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
    {::_pbi::TcParser::FastEr0S1,
     {24, 1, 3, PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 id = 1 [default = 0];
    {PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // repeated uint32 tags = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.tags_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated uint32 geometry = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.geometry_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
  }}, {{
    {0, 4},
  }}, {{
  }},
};

::uint8_t* Tile_Feature::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vector_tile.Tile.Feature)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // repeated uint32 tags = 2 [packed = true];
  {
    int byte_size = _impl_._tags_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_tags(), byte_size, target);
    }
  }

  // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // repeated uint32 geometry = 4 [packed = true];
  {
    int byte_size = _impl_._geometry_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_geometry(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vector_tile.Tile.Feature)
  return target;
}

::size_t Tile_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Feature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tags = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tags())
    ;
    _impl_._tags_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 geometry = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_geometry())
    ;
    _impl_._geometry_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Tile_Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile_Feature*>(
      &from));
}

void Tile_Feature::MergeFrom(const Tile_Feature& from) {
  Tile_Feature* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Feature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  _this->_internal_mutable_geometry()->MergeFrom(from._internal_geometry());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile_Feature::CopyFrom(const Tile_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Tile_Feature::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Tile_Feature::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Tile_Feature::InternalSwap(Tile_Feature* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.geometry_.InternalSwap(&other->_impl_.geometry_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.type_)
      + sizeof(Tile_Feature::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Tile_Feature, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

std::string Tile_Feature::GetTypeName() const {
  return "vector_tile.Tile.Feature";
}

// ===================================================================

class Tile_Layer::_Internal {
 public:
  using HasBits = decltype(std::declval<Tile_Layer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

Tile_Layer::Tile_Layer(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vector_tile.Tile.Layer)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Layer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _extensions_{visibility, arena},
        _has_bits_{from._has_bits_},
        _cached_size_{0},
        features_{visibility, arena, from.features_},
        keys_{visibility, arena, from.keys_},
        values_{visibility, arena, from.values_},
        name_(arena, from.name_) {}

Tile_Layer::Tile_Layer(
    ::google::protobuf::Arena* arena,
    const Tile_Layer& from)
    : ::google::protobuf::MessageLite(arena) {
  Tile_Layer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_._extensions_.MergeFrom(this, from._impl_._extensions_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, extent_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, extent_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, extent_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile.Layer)
}
inline PROTOBUF_NDEBUG_INLINE Tile_Layer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _extensions_{visibility, arena},
        _cached_size_{0},
        features_{visibility, arena},
        keys_{visibility, arena},
        values_{visibility, arena},
        name_(arena),
        extent_{4096u},
        version_{1u} {}

inline void Tile_Layer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Tile_Layer::~Tile_Layer() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile.Layer)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Tile_Layer::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Tile_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile.Layer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.features_.Clear();
  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    _impl_.extent_ = 4096u;
    _impl_.version_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile_Layer::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 0, 2> Tile_Layer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_._extensions_),
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950880,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Tile_Layer_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.name_)}},
    // repeated .vector_tile.Tile.Feature features = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.features_)}},
    // repeated string keys = 3;
    {::_pbi::TcParser::FastBR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.keys_)}},
    // repeated .vector_tile.Tile.Value values = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.values_)}},
    // optional uint32 extent = 5 [default = 4096];
    {::_pbi::TcParser::FastV32S1,
     {40, 1, 0, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.extent_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // required uint32 version = 15 [default = 1];
    {::_pbi::TcParser::FastV32S1,
     {120, 2, 0, PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required string name = 1;
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .vector_tile.Tile.Feature features = 2;
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.features_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string keys = 3;
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.keys_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated .vector_tile.Tile.Value values = 4;
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.values_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 extent = 5 [default = 4096];
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.extent_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 version = 15 [default = 1];
    {PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::vector_tile::Tile_Feature>()},
    {::_pbi::TcParser::GetTable<::vector_tile::Tile_Value>()},
  }}, {{
  }},
};

::uint8_t* Tile_Layer::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vector_tile.Tile.Layer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .vector_tile.Tile.Feature features = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_features().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys().Get(i);
    target = stream->WriteString(3, s, target);
  }

  // repeated .vector_tile.Tile.Value values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_extent(), target);
  }

  // required uint32 version = 15 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_version(), target);
  }

  // Extension range [16, 536870912)
  target = _impl_._extensions_._InternalSerialize(
      internal_default_instance(), 16, 536870912, target, stream);
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vector_tile.Tile.Layer)
  return target;
}

::size_t Tile_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile.Layer)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vector_tile.Tile.Feature features = 2;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->_internal_features()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string keys = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }
  // repeated .vector_tile.Tile.Value values = 4;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // required string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // optional uint32 extent = 5 [default = 4096];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_extent());
  }

  // required uint32 version = 15 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Tile_Layer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile_Layer*>(
      &from));
}

void Tile_Layer::MergeFrom(const Tile_Layer& from) {
  Tile_Layer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile.Layer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_features()->MergeFrom(
      from._internal_features());
  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.extent_ = from._impl_.extent_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile_Layer::CopyFrom(const Tile_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Tile_Layer::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_values()))
    return false;
  return true;
}

::_pbi::CachedSize* Tile_Layer::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Tile_Layer::InternalSwap(Tile_Layer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.version_)
      + sizeof(Tile_Layer::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Tile_Layer, _impl_.extent_)>(
          reinterpret_cast<char*>(&_impl_.extent_),
          reinterpret_cast<char*>(&other->_impl_.extent_));
}

std::string Tile_Layer::GetTypeName() const {
  return "vector_tile.Tile.Layer";
}

// ===================================================================

class Tile::_Internal {
 public:
};

Tile::Tile(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vector_tile.Tile)
}
inline PROTOBUF_NDEBUG_INLINE Tile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _extensions_{visibility, arena},
        layers_{visibility, arena, from.layers_},
        _cached_size_{0} {}

Tile::Tile(
    ::google::protobuf::Arena* arena,
    const Tile& from)
    : ::google::protobuf::MessageLite(arena) {
  Tile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_._extensions_.MergeFrom(this, from._impl_._extensions_);

  // @@protoc_insertion_point(copy_constructor:vector_tile.Tile)
}
inline PROTOBUF_NDEBUG_INLINE Tile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _extensions_{visibility, arena},
        layers_{visibility, arena},
        _cached_size_{0} {}

inline void Tile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Tile::~Tile() {
  // @@protoc_insertion_point(destructor:vector_tile.Tile)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Tile::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:vector_tile.Tile)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.layers_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Tile::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Tile::_table_ = {
  {
    0,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(Tile, _impl_._extensions_),
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967291,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Tile_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .vector_tile.Tile.Layer layers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Tile, _impl_.layers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .vector_tile.Tile.Layer layers = 3;
    {PROTOBUF_FIELD_OFFSET(Tile, _impl_.layers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::vector_tile::Tile_Layer>()},
  }}, {{
  }},
};

::uint8_t* Tile::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vector_tile.Tile)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .vector_tile.Tile.Layer layers = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_layers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // Extension range [16, 8192)
  target = _impl_._extensions_._InternalSerialize(
      internal_default_instance(), 16, 8192, target, stream);
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vector_tile.Tile)
  return target;
}

::size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vector_tile.Tile)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vector_tile.Tile.Layer layers = 3;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_internal_layers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void Tile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Tile*>(
      &from));
}

void Tile::MergeFrom(const Tile& from) {
  Tile* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:vector_tile.Tile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vector_tile.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Tile::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(_internal_layers()))
    return false;
  return true;
}

::_pbi::CachedSize* Tile::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Tile::InternalSwap(Tile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
}

std::string Tile::GetTypeName() const {
  return "vector_tile.Tile";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vector_tile
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
